generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         Int           @id @default(autoincrement())
  firstName  String?
  lastName   String?
  password   String
  email      String        @unique
  avatar     String?
  role       Role          @default(USER)
  createdAt  DateTime      @default(now())
  instructor Lessons[]     @relation("instructor")
  student    Lessons[]     @relation("student")
  skills     UsersSkills[]
  barters    Barters[]     @relation("barter_proposer")
}

model Scores {
  id       Int     @id @default(autoincrement())
  value    Int
  lesson   Lessons @relation(fields: [lessonId], references: [id])
  lessonId Int
}

model Lessons {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  content        String
  photo          String?
  video          String?
  createdAt      DateTime        @default(now())
  instructor     Users           @relation("instructor", fields: [instructorId], references: [id]) 
  instructorId   Int             
  student        Users?          @relation("student", fields: [studentId], references: [id])
  studentId      Int?
  category       Categories      @relation(fields: [categoryId], references: [id])
  categoryId     Int
  localization   Localizations? @relation(fields: [localizationId], references: [id])
  localizationId Int?
  scores         Scores[]

  // Barter relacje
  receivedBarters Barters[] @relation("barter_lesson")
  offeredBarters  Barters[] @relation("barter_offer")
}

model Categories {
  id     Int       @id @default(autoincrement())
  name   String    @unique
  lesson Lessons[]
}

model Localizations {
  id       Int       @id @default(autoincrement())
  city     String
  street   String
  zip      String
  province String
  lesson   Lessons[]
}

model Barters {
  id              Int      @id @default(autoincrement())
  lesson          Lessons  @relation("barter_lesson", fields: [lessonId], references: [id])
  lessonId        Int
  offeredLesson   Lessons  @relation("barter_offer", fields: [offeredLessonId], references: [id])
  offeredLessonId Int
  proposer        Users    @relation("barter_proposer", fields: [proposerId], references: [id])
  proposerId      Int
  message         String?
  status          BarterStatus @default(PENDING)
  createdAt       DateTime @default(now())
}

model UsersSkills {
  user    Users  @relation(fields: [userId], references: [id])
  userId  Int
  skill   Skills @relation(fields: [skillId], references: [id])
  skillId Int
  @@id([userId, skillId])
}

model Skills {
  id    Int           @id @default(autoincrement())
  name  String
  level Int
  user  UsersSkills[]
}

enum Role {
  USER
  ADMIN
}

enum BarterStatus {
  PENDING
  ACCEPTED
  REJECTED
}
